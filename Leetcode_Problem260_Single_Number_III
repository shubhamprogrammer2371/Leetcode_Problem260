/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* singleNumber(int* nums, int numsSize, int* returnSize){
    int res = 0 , x , *arr = malloc(2*sizeof(int));
    arr[0] = 0;
    arr[1] = 0;
    for(int i = 0 ; i < numsSize ; i++)
        res = res^nums[i];
    x = (res == (INT_MIN)) ? 0 : -res;
    for(int i = 0 ; i < numsSize ; i++)
        if((res & x) & nums[i])
            arr[0] = arr[0]^nums[i];
    arr[1] = res^arr[0];
    *returnSize = 2;
    return arr;
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* singleNumber(int* nums, int numsSize, int* returnSize) {
    for (int i = 0; i < numsSize - 1; i++) 
    {
        for (int j = 0; j < numsSize - i - 1; j++) 
        {
            if (nums[j] > nums[j + 1]) 
            {
                int temp = nums[j];
                nums[j] = nums[j + 1];
                nums[j + 1] = temp;
            }
        }
    }
    int *arr = malloc(2 * sizeof(int)) , m = 0 , i = 0;
    *returnSize = 2;
    if (nums[0] != nums[1]) 
        arr[m++] = nums[0];
    for (i = 1; i < numsSize - 1; i++) 
        if ((nums[i] != nums[i - 1]) && (nums[i] != nums[i + 1]))
            arr[m++] = nums[i];
    if (nums[i] != nums[i - 1]) 
        arr[m] = nums[i];
    return arr;
}
